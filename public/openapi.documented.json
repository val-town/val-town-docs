{
  "openapi": "3.1.0",
  "info": {
    "title": "Val Town API",
    "description": "Val Town’s public API\n\nOpenAPI JSON endpoint:\n\nhttps://api.val.town/openapi.json",
    "termsOfService": "https://www.val.town/termsofuse",
    "version": "1"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Endpoints that support authorization expect Bearer authentication, using an API token provided from Val Town."
      }
    },
    "schemas": {
      "User": {
        "description": "User object",
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "description": "The ID of this user",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "user",
              "org"
            ],
            "description": "Whether this is a user or an organization"
          },
          "bio": {
            "anyOf": [
              {
                "description": "The user’s biography, if they have provided one",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "username": {
            "anyOf": [
              {
                "description": "The user’s handle that they chose for themselves. Does not include the @ symbol",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "profileImageUrl": {
            "anyOf": [
              {
                "description": "URL that points to the user’s profile image, if one exists",
                "format": "uri",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "url": {
            "format": "uri",
            "description": "URL of this user’s profile on Val Town’s website",
            "type": "string"
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "URL of this user on this API",
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "id",
          "type",
          "bio",
          "username",
          "profileImageUrl",
          "url",
          "links"
        ],
        "example": {
          "id": "00000000-0000-0000-0000-000000000000",
          "bio": "Hello world",
          "username": "tmcw",
          "url": "https://val.town/u/tmcw",
          "profileImageUrl": null
        }
      },
      "ResultSet": {
        "title": "ResultSet",
        "description": "Result of executing an SQL statement.",
        "type": "object",
        "properties": {
          "columns": {
            "description": "Names of columns.\n\nNames of columns can be defined using the `AS` keyword in SQL:\n\n```sql\nSELECT author AS author, COUNT(*) AS count FROM books GROUP BY author\n```",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "columnTypes": {
            "description": "Types of columns.\n\nThe types are currently shown for types declared in a SQL table. For column types of function calls, for example, an empty string is returned.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rows": {
            "description": "Rows produced by the statement.",
            "type": "array",
            "items": {
              "title": "TursoRow",
              "type": "array",
              "items": {
                "description": "Columns can be accessed like an object by column names."
              }
            }
          },
          "rowsAffected": {
            "description": "Number of rows that were affected by an UPDATE, INSERT or DELETE operation.\n\nThis value is not specified for other SQL statements.",
            "type": "number"
          },
          "lastInsertRowid": {
            "description": "ROWID of the last inserted row.\n\nThis value is not specified if the SQL statement was not an INSERT or if the table was not a ROWID table.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "columns",
          "columnTypes",
          "rows",
          "rowsAffected"
        ]
      },
      "ExtendedVal": {
        "description": "A Legacy Val",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of this val",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "This val's id",
            "type": "string"
          },
          "version": {
            "minimum": 0,
            "description": "The version of this val, starting at zero",
            "type": "integer"
          },
          "code": {
            "anyOf": [
              {
                "description": "TypeScript code associated with this val",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "public": {
            "description": "Whether this val is available publicly on Val Town",
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "privacy": {
            "type": "string",
            "enum": [
              "public",
              "unlisted",
              "private"
            ],
            "description": "This resource's privacy setting. Unlisted resources do not appear on profile pages or elsewhere, but you can link to them."
          },
          "type": {
            "type": "string",
            "enum": [
              "interval",
              "http",
              "express",
              "email",
              "script",
              "rpc",
              "httpnext"
            ],
            "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations"
          },
          "url": {
            "format": "uri",
            "description": "The URL of this resource on the Val Town website",
            "type": "string"
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "The URL of this val on this API",
                "type": "string"
              },
              "versions": {
                "format": "uri",
                "description": "The endpoint to retrieve this val's versions",
                "type": "string"
              },
              "module": {
                "format": "uri",
                "description": "The URL of this Val's source code as a module",
                "type": "string"
              },
              "endpoint": {
                "format": "uri",
                "description": "This val's web endpoint, where it serves a website or API",
                "type": "string"
              }
            },
            "required": [
              "self",
              "versions",
              "module"
            ]
          },
          "author": {
            "anyOf": [
              {
                "description": "The user who created this val",
                "type": "object",
                "properties": {
                  "id": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "username": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "id",
                  "username"
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "versionCreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "likeCount": {
            "minimum": 0,
            "description": "How many likes this val has received",
            "type": "integer"
          },
          "referenceCount": {
            "minimum": 0,
            "descriptions": "How many other public vals have imported this one",
            "type": "integer"
          },
          "readme": {
            "anyOf": [
              {
                "description": "This val's readme, as Markdown",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "name",
          "id",
          "version",
          "code",
          "public",
          "createdAt",
          "updatedAt",
          "privacy",
          "type",
          "url",
          "links",
          "author",
          "likeCount",
          "referenceCount",
          "readme"
        ]
      },
      "BasicVal": {
        "description": "A Val",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of this val",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "This val's id",
            "type": "string"
          },
          "version": {
            "minimum": 0,
            "description": "The version of this val, starting at zero",
            "type": "integer"
          },
          "code": {
            "anyOf": [
              {
                "description": "TypeScript code associated with this val",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "public": {
            "description": "Whether this val is available publicly on Val Town",
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "privacy": {
            "type": "string",
            "enum": [
              "public",
              "unlisted",
              "private"
            ],
            "description": "This resource's privacy setting. Unlisted resources do not appear on profile pages or elsewhere, but you can link to them."
          },
          "type": {
            "type": "string",
            "enum": [
              "interval",
              "http",
              "express",
              "email",
              "script",
              "rpc",
              "httpnext"
            ],
            "description": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations"
          },
          "url": {
            "format": "uri",
            "description": "The URL of this resource on the Val Town website",
            "type": "string"
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "The URL of this val on this API",
                "type": "string"
              },
              "versions": {
                "format": "uri",
                "description": "The endpoint to retrieve this val's versions",
                "type": "string"
              },
              "module": {
                "format": "uri",
                "description": "The URL of this Val's source code as a module",
                "type": "string"
              },
              "endpoint": {
                "format": "uri",
                "description": "This val's web endpoint, where it serves a website or API",
                "type": "string"
              }
            },
            "required": [
              "self",
              "versions",
              "module"
            ]
          },
          "author": {
            "anyOf": [
              {
                "description": "The user who created this val",
                "type": "object",
                "properties": {
                  "id": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "username": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "id",
                  "username"
                ]
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "name",
          "id",
          "version",
          "code",
          "public",
          "createdAt",
          "updatedAt",
          "privacy",
          "type",
          "url",
          "links",
          "author"
        ],
        "example": {
          "version": 0,
          "name": "counter",
          "code": "export const count = 1;",
          "createdAt": "2024-06-11T22:05:12.585Z",
          "public": true,
          "id": "00000000-0000-0000-0000-000000000000",
          "privacy": "public",
          "type": "script",
          "url": "https://val.town/v/tmcw/counter",
          "author": {
            "id": "00000000-0000-0000-0000-000000000000",
            "username": "tmcw"
          }
        }
      },
      "PaginationLinks": {
        "description": "Links to use for pagination",
        "type": "object",
        "properties": {
          "self": {
            "format": "uri",
            "description": "URL of this page",
            "type": "string"
          },
          "prev": {
            "format": "uri",
            "description": "URL of the previous page, if any",
            "type": "string"
          },
          "next": {
            "format": "uri",
            "description": "URL of the next page, if any",
            "type": "string"
          }
        },
        "required": [
          "self"
        ]
      },
      "Project": {
        "description": "A Project",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "The id of the project",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "privacy": {
            "type": "string",
            "enum": [
              "public",
              "unlisted",
              "private"
            ],
            "description": "This resource's privacy setting. Unlisted resources do not appear on profile pages or elsewhere, but you can link to them."
          },
          "author": {
            "type": "object",
            "properties": {
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "user"
                    ]
                  },
                  {
                    "type": "string",
                    "enum": [
                      "org"
                    ]
                  }
                ]
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "username": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "type",
              "id",
              "username"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "imageUrl": {
            "anyOf": [
              {
                "description": "The URL of this project's image",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "The URL of this resource on this API",
                "type": "string"
              },
              "html": {
                "format": "uri",
                "description": "The URL of this resource on Val Town",
                "type": "string"
              }
            },
            "required": [
              "self",
              "html"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "createdAt",
          "privacy",
          "author",
          "description",
          "imageUrl",
          "links"
        ]
      },
      "Org": {
        "description": "An Org",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "The id of the org",
            "type": "string"
          }
        },
        "required": [
          "username",
          "id"
        ]
      },
      "Val": {
        "description": "A Val",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "The id of the val",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "privacy": {
            "type": "string",
            "enum": [
              "public",
              "unlisted",
              "private"
            ],
            "description": "This resource's privacy setting. Unlisted resources do not appear on profile pages or elsewhere, but you can link to them."
          },
          "author": {
            "type": "object",
            "properties": {
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "user"
                    ]
                  },
                  {
                    "type": "string",
                    "enum": [
                      "org"
                    ]
                  }
                ]
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "username": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "type",
              "id",
              "username"
            ]
          },
          "imageUrl": {
            "anyOf": [
              {
                "description": "The URL of this val's image",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "The URL of this resource on this API",
                "type": "string"
              },
              "html": {
                "format": "uri",
                "description": "The URL of this resource on Val Town",
                "type": "string"
              }
            },
            "required": [
              "self",
              "html"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "createdAt",
          "privacy",
          "author",
          "imageUrl",
          "description",
          "links"
        ]
      },
      "Branch": {
        "description": "A Branch",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "The id of the branch",
            "type": "string"
          },
          "version": {
            "minimum": 0,
            "type": "integer"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "forkedBranchId": {
            "anyOf": [
              {
                "description": "The id of the branch this branch was forked from",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "The URL of this resource on this API",
                "type": "string"
              },
              "html": {
                "format": "uri",
                "description": "The URL of this resource on Val Town",
                "type": "string"
              }
            },
            "required": [
              "self",
              "html"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "version",
          "createdAt",
          "updatedAt",
          "forkedBranchId",
          "links"
        ]
      },
      "FileRevisionMetadataV1": {
        "description": "A File or Directory's Metadata",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "The id of the resource",
            "type": "string"
          },
          "parentId": {
            "anyOf": [
              {
                "format": "uuid",
                "description": "The id of the parent resource",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "path": {
            "type": "string"
          },
          "version": {
            "minimum": 0,
            "type": "integer"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "directory",
              "file",
              "interval",
              "http",
              "email",
              "script"
            ]
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "The URL of this resource on this API",
                "type": "string"
              },
              "html": {
                "format": "uri",
                "description": "The URL of this resource on Val Town",
                "type": "string"
              },
              "module": {
                "format": "uri",
                "description": "The URL of this resource's source code as a module",
                "type": "string"
              },
              "endpoint": {
                "format": "uri",
                "description": "This resource's web endpoint, where it serves a website or API",
                "type": "string"
              }
            },
            "required": [
              "self",
              "html",
              "module"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "parentId",
          "path",
          "version",
          "updatedAt",
          "type",
          "links"
        ]
      },
      "FileRevisionMetadataV2": {
        "description": "A File or Directory's Metadata",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "description": "The id of the resource",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "version": {
            "minimum": 0,
            "type": "integer"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "directory",
              "file",
              "interval",
              "http",
              "email",
              "script"
            ]
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "format": "uri",
                "description": "The URL of this resource on this API",
                "type": "string"
              },
              "html": {
                "format": "uri",
                "description": "The URL of this resource on Val Town",
                "type": "string"
              },
              "module": {
                "format": "uri",
                "description": "The URL of this resource's source code as a module",
                "type": "string"
              },
              "endpoint": {
                "format": "uri",
                "description": "This resource's web endpoint, where it serves a website or API",
                "type": "string"
              }
            },
            "required": [
              "self",
              "html",
              "module"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "path",
          "version",
          "updatedAt",
          "type",
          "links"
        ]
      }
    }
  },
  "paths": {
    "/v1/search/vals": {
      "get": {
        "operationId": "searchVals",
        "tags": [
          "search"
        ],
        "description": "Search for vals across the platform",
        "parameters": [
          {
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "required": true,
            "description": "Number of items to skip in order to deliver paginated results"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          },
          {
            "schema": {
              "minLength": 1,
              "maxLength": 256,
              "type": "string"
            },
            "in": "query",
            "name": "query",
            "required": true,
            "description": "Search query"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BasicVal"
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\n// Automatically fetches more pages as needed.\nfor await (const valListResponse of client.search.vals.list({ limit: 1, offset: 0, query: 'x' })) {\n  console.log(valListResponse.id);\n}"
          }
        ]
      }
    },
    "/v1/alias/{username}": {
      "get": {
        "operationId": "aliasUsername",
        "tags": [
          "alias"
        ],
        "description": "Get basic details about a user, given their username",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "required": true,
            "description": "Username of the user who you are looking for"
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst user = await client.alias.username.retrieve('username');\n\nconsole.log(user.id);"
          }
        ]
      }
    },
    "/v1/me": {
      "get": {
        "operationId": "meGet",
        "tags": [
          "me"
        ],
        "description": "Get profile information for the current user",
        "responses": {
          "200": {
            "description": "Your user information, with tier and email included",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Your user information, with tier and email included",
                  "type": "object",
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The ID of this user",
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "user",
                        "org"
                      ],
                      "description": "Whether this is a user or an organization"
                    },
                    "bio": {
                      "anyOf": [
                        {
                          "description": "The user’s biography, if they have provided one",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "username": {
                      "anyOf": [
                        {
                          "description": "The user’s handle that they chose for themselves. Does not include the @ symbol",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "profileImageUrl": {
                      "anyOf": [
                        {
                          "description": "URL that points to the user’s profile image, if one exists",
                          "format": "uri",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "url": {
                      "format": "uri",
                      "description": "URL of this user’s profile on Val Town’s website",
                      "type": "string"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "format": "uri",
                          "description": "URL of this user on this API",
                          "type": "string"
                        }
                      },
                      "required": [
                        "self"
                      ]
                    },
                    "tier": {
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "free",
                            "pro"
                          ],
                          "description": "Your account tier"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "email": {
                      "anyOf": [
                        {
                          "description": "Your email address",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type",
                    "bio",
                    "username",
                    "profileImageUrl",
                    "url",
                    "links",
                    "tier",
                    "email"
                  ]
                },
                "example": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "bio": "Hello world",
                  "username": "tmcw",
                  "email": "example@example.com",
                  "profileImageUrl": null,
                  "tier": "pro"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst profile = await client.me.profile.retrieve();\n\nconsole.log(profile.id);"
          }
        ]
      }
    },
    "/v1/blob": {
      "get": {
        "operationId": "blobsList",
        "tags": [
          "blobs"
        ],
        "description": "List blobs in your account",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "prefix",
            "required": false,
            "description": "If specified, only include blobs that start with this string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of blobs that you’ve stored",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of blobs that you’ve stored",
                  "type": "array",
                  "items": {
                    "title": "BlobListingItem",
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "size": {
                        "description": "Size in bytes of the object",
                        "type": "integer"
                      },
                      "lastModified": {
                        "description": "Creation date of the object",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ]
                  }
                },
                "example": [
                  {
                    "key": "hello_world",
                    "size": 20,
                    "lastModified": "2024-06-24T20:00:59.702Z"
                  }
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst blobs = await client.blobs.list();\n\nconsole.log(blobs);"
          }
        ]
      }
    },
    "/v1/blob/{key}": {
      "get": {
        "operationId": "blobsGet",
        "tags": [
          "blobs"
        ],
        "description": "Get a blob’s contents.",
        "parameters": [
          {
            "schema": {
              "minLength": 1,
              "maxLength": 512,
              "type": "string"
            },
            "in": "path",
            "name": "key",
            "required": true,
            "description": "Key that uniquely identifies this blob"
          }
        ],
        "responses": {
          "200": {
            "description": "Binary contents of the returned file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst blob = await client.blobs.get('x');\n\nconsole.log(blob);\n\nconst content = await blob.blob();\nconsole.log(content);"
          }
        ]
      },
      "post": {
        "operationId": "blobsStore",
        "tags": [
          "blobs"
        ],
        "description": "Store data in blob storage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "binary",
                "description": "Binary input data",
                "type": "string"
              }
            }
          },
          "description": "Binary input data"
        },
        "parameters": [
          {
            "schema": {
              "minLength": 1,
              "maxLength": 512,
              "type": "string"
            },
            "in": "path",
            "name": "key",
            "required": true,
            "description": "Key that uniquely identifies this blob"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully stored as blob"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown({\n  bearerToken: 'My Bearer Token',\n});\n\nawait client.blobs.store('x', fs.createReadStream('path/to/file'));"
          }
        ]
      },
      "delete": {
        "operationId": "blobsDelete",
        "tags": [
          "blobs"
        ],
        "description": "Delete a blob",
        "parameters": [
          {
            "schema": {
              "minLength": 1,
              "maxLength": 512,
              "type": "string"
            },
            "in": "path",
            "name": "key",
            "required": true,
            "description": "Key that uniquely identifies this blob"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Blob successfully deleted"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown({\n  bearerToken: 'My Bearer Token',\n});\n\nawait client.blobs.delete('x');"
          }
        ]
      }
    },
    "/v1/users/{user_id}": {
      "get": {
        "operationId": "usersGet",
        "tags": [
          "users"
        ],
        "description": "Get basic information about a user",
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User Id"
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst user = await client.users.retrieve('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');\n\nconsole.log(user.id);"
          }
        ]
      }
    },
    "/v1/sqlite/execute": {
      "post": {
        "operationId": "sqliteExecute",
        "tags": [
          "sqlite"
        ],
        "description": "Execute a single SQLite statement and return results",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A single statement to run",
                "type": "object",
                "properties": {
                  "statement": {
                    "anyOf": [
                      {
                        "description": "Simple SQL statement to run in SQLite",
                        "type": "string"
                      },
                      {
                        "title": "ParameterizedQuery",
                        "description": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
                        "type": "object",
                        "properties": {
                          "sql": {
                            "description": "SQL statement, with ? placeholders for arguments",
                            "type": "string"
                          },
                          "args": {
                            "title": "StatementArg",
                            "description": "List of arguments to be used in the given statement",
                            "anyOf": [
                              {
                                "type": "array",
                                "items": {
                                  "title": "TursoValue",
                                  "description": "A value to be used as a parameter"
                                }
                              },
                              {
                                "type": "object",
                                "additionalProperties": {
                                  "title": "TursoValue",
                                  "description": "A value to be used as a parameter"
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "sql",
                          "args"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "statement"
                ]
              },
              "examples": {
                "example1": {
                  "value": {
                    "statement": "SELECT 1;"
                  }
                },
                "example2": {
                  "value": {
                    "statement": {
                      "sql": "SELECT * FROM table WHERE column = ?;",
                      "args": [
                        1
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true,
          "description": "A single statement to run"
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Result of executing an SQL statement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultSet"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown({\n  bearerToken: 'My Bearer Token',\n});\n\nconst resultSet = await client.sqlite.execute({ statement: 'SELECT 1;' });\n\nconsole.log(resultSet.lastInsertRowid);"
          }
        ]
      }
    },
    "/v1/sqlite/batch": {
      "post": {
        "operationId": "sqliteBatch",
        "tags": [
          "sqlite"
        ],
        "description": "Execute a batch of SQLite statements and return results for all of them",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A set of statements to be run in a single batch",
                "type": "object",
                "properties": {
                  "statements": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "description": "Simple SQL statement to run in SQLite",
                          "type": "string"
                        },
                        {
                          "title": "ParameterizedQuery",
                          "description": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
                          "type": "object",
                          "properties": {
                            "sql": {
                              "description": "SQL statement, with ? placeholders for arguments",
                              "type": "string"
                            },
                            "args": {
                              "title": "StatementArg",
                              "description": "List of arguments to be used in the given statement",
                              "anyOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "title": "TursoValue",
                                    "description": "A value to be used as a parameter"
                                  }
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": {
                                    "title": "TursoValue",
                                    "description": "A value to be used as a parameter"
                                  }
                                }
                              ]
                            }
                          },
                          "required": [
                            "sql",
                            "args"
                          ]
                        }
                      ]
                    }
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "write",
                      "read",
                      "deferred"
                    ]
                  }
                },
                "required": [
                  "statements"
                ]
              },
              "example": {
                "statements": [
                  "SELECT 1;"
                ],
                "mode": "read"
              }
            }
          },
          "required": true,
          "description": "A set of statements to be run in a single batch"
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Array of results from the statements executed",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Array of results from the statements executed",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultSet"
                  }
                },
                "example": [
                  {
                    "columns": [
                      "id"
                    ],
                    "columnTypes": [
                      "number"
                    ],
                    "rows": [
                      [
                        1
                      ]
                    ],
                    "rowsAffected": 0,
                    "lastInsertRowid": null
                  }
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown({\n  bearerToken: 'My Bearer Token',\n});\n\nconst resultSets = await client.sqlite.batch({ statements: ['SELECT 1;'], mode: 'read' });\n\nconsole.log(resultSets);"
          }
        ]
      }
    },
    "/v1/email": {
      "post": {
        "operationId": "emailsSend",
        "tags": [
          "emails"
        ],
        "description": "Send emails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Fields for an email to be sent",
                "type": "object",
                "properties": {
                  "subject": {
                    "description": "The subject line of the email",
                    "type": "string"
                  },
                  "from": {
                    "title": "EmailData",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "title": "EmailNameAndAddress",
                        "description": "An email address and name",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ]
                      }
                    ]
                  },
                  "headers": {
                    "description": "A set of headers to include the email that you send",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "to": {
                    "title": "EmailDataInput",
                    "description": "A single email or list of emails for one of the address fields",
                    "anyOf": [
                      {
                        "title": "EmailData",
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "title": "EmailNameAndAddress",
                            "description": "An email address and name",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email"
                            ]
                          }
                        ]
                      },
                      {
                        "title": "EmailDataList",
                        "type": "array",
                        "items": {
                          "title": "EmailData",
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "title": "EmailNameAndAddress",
                              "description": "An email address and name",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "email": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "email"
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "cc": {
                    "title": "EmailDataInput",
                    "description": "A single email or list of emails for one of the address fields",
                    "anyOf": [
                      {
                        "title": "EmailData",
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "title": "EmailNameAndAddress",
                            "description": "An email address and name",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email"
                            ]
                          }
                        ]
                      },
                      {
                        "title": "EmailDataList",
                        "type": "array",
                        "items": {
                          "title": "EmailData",
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "title": "EmailNameAndAddress",
                              "description": "An email address and name",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "email": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "email"
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "bcc": {
                    "title": "EmailDataInput",
                    "description": "A single email or list of emails for one of the address fields",
                    "anyOf": [
                      {
                        "title": "EmailData",
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "title": "EmailNameAndAddress",
                            "description": "An email address and name",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email"
                            ]
                          }
                        ]
                      },
                      {
                        "title": "EmailDataList",
                        "type": "array",
                        "items": {
                          "title": "EmailData",
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "title": "EmailNameAndAddress",
                              "description": "An email address and name",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "email": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "email"
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "text": {
                    "description": "Text content of the email, for email clients that may not support HTML",
                    "type": "string"
                  },
                  "html": {
                    "description": "HTML content of the email. Can be specified alongside text",
                    "type": "string"
                  },
                  "attachments": {
                    "description": "A list of attachments to add to the email",
                    "type": "array",
                    "items": {
                      "title": "AttachmentObject",
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string"
                        },
                        "filename": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "disposition": {
                          "type": "string"
                        },
                        "contentId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "content",
                        "filename"
                      ]
                    }
                  },
                  "replyToList": {
                    "title": "ReplyToList",
                    "description": "A reply-to list of email addresses",
                    "anyOf": [
                      {
                        "title": "EmailNameAndAddress",
                        "description": "An email address and name",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ]
                      },
                      {
                        "title": "EmailList",
                        "type": "array",
                        "items": {
                          "title": "EmailNameAndAddress",
                          "description": "An email address and name",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "email"
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "example": {
                "subject": "An important message",
                "text": "Hello world",
                "html": "Hello <strong>world</strong>"
              }
            }
          },
          "description": "Fields for an email to be sent"
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully sent email",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Successfully sent email",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown({\n  bearerToken: 'My Bearer Token',\n});\n\nconst response = await client.emails.send({\n  html: 'Hello <strong>world</strong>',\n  subject: 'An important message',\n  text: 'Hello world',\n});\n\nconsole.log(response.message);"
          }
        ]
      }
    },
    "/v1/telemetry/traces": {
      "get": {
        "operationId": "traceList",
        "tags": [
          "telemetry"
        ],
        "description": "Get OpenTelemetry traces within a specified time window with flexible pagination options: Pass in only the end time to paginate backwards from there. Pass in a start time to paginate backwards from now until the start time. Pass in both to get resources within the time window. Choose to return in end_time order instead to view traces that completed in a window or since a time. Filter additionally by branch_ids or file_id.",
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "file_id",
            "required": false,
            "description": "Include only resources from a given file identified by its ID"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "format": "uuid",
                "type": "string"
              }
            },
            "in": "query",
            "name": "branch_ids",
            "required": false,
            "description": "Branch IDs to filter by"
          },
          {
            "schema": {
              "default": "desc",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "asc"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "desc"
                  ]
                }
              ]
            },
            "in": "query",
            "name": "direction",
            "required": true,
            "description": "Sort direction for the traces. Defaults to descending order of timestamp."
          },
          {
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query",
            "name": "start",
            "required": false,
            "description": "Start date of the time window (earliest time)"
          },
          {
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query",
            "name": "end",
            "required": false,
            "description": "End date of the time window (latest time)"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          },
          {
            "schema": {
              "default": "start_time",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "start_time"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "end_time"
                  ]
                }
              ]
            },
            "in": "query",
            "name": "order_by",
            "required": false,
            "description": "When set to end_time, traces are sorted by their end time, and pending traces are omitted. When set to start_time, all traces are included, with pending traces given \"0\" for their end time."
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "traceId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "startTimeUnixNano": {
                            "type": "string"
                          },
                          "endTimeUnixNano": {
                            "description": "0 if trace is unfinished",
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "stringValue": {
                                      "type": "string"
                                    },
                                    "intValue": {
                                      "type": "string"
                                    },
                                    "doubleValue": {
                                      "type": "number"
                                    },
                                    "boolValue": {
                                      "type": "boolean"
                                    },
                                    "arrayValue": {},
                                    "kvlistValue": {},
                                    "bytesValue": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ]
                            }
                          },
                          "status": {
                            "type": "object",
                            "properties": {
                              "message": {
                                "type": "string"
                              },
                              "code": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "message",
                              "code"
                            ]
                          }
                        },
                        "required": [
                          "traceId",
                          "name",
                          "startTimeUnixNano",
                          "endTimeUnixNano",
                          "attributes",
                          "status"
                        ]
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst traces = await client.telemetry.traces.list({ direction: 'asc', limit: 1 });\n\nconsole.log(traces.data);"
          }
        ]
      }
    },
    "/v1/telemetry/logs": {
      "get": {
        "operationId": "logList",
        "tags": [
          "telemetry"
        ],
        "description": "Get OpenTelemetry logs within a specified time window with flexible pagination options: Pass in only the end time to paginate backwards from there. Pass in a start time to paginate backwards from now until the start time. Pass in both to get resources within the time window. Filter additionally by branch_ids or file_id.",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "Include only logs from a given trace ID",
                "type": "string"
              }
            },
            "in": "query",
            "name": "trace_ids",
            "required": false
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "file_id",
            "required": false,
            "description": "Include only resources from a given file identified by its ID"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "format": "uuid",
                "type": "string"
              }
            },
            "in": "query",
            "name": "branch_ids",
            "required": false,
            "description": "Branch IDs to filter by"
          },
          {
            "schema": {
              "default": "desc",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "asc"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "desc"
                  ]
                }
              ]
            },
            "in": "query",
            "name": "direction",
            "required": true,
            "description": "Sort direction for the traces. Defaults to descending order of timestamp."
          },
          {
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query",
            "name": "start",
            "required": false,
            "description": "Start date of the time window (earliest time)"
          },
          {
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query",
            "name": "end",
            "required": false,
            "description": "End date of the time window (latest time)"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timeUnixNano": {
                            "type": "string"
                          },
                          "body": {
                            "type": "object",
                            "properties": {
                              "stringValue": {
                                "type": "string"
                              },
                              "intValue": {
                                "type": "string"
                              },
                              "doubleValue": {
                                "type": "number"
                              },
                              "boolValue": {
                                "type": "boolean"
                              },
                              "arrayValue": {},
                              "kvlistValue": {},
                              "bytesValue": {
                                "type": "string"
                              }
                            }
                          },
                          "traceId": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "stringValue": {
                                      "type": "string"
                                    },
                                    "intValue": {
                                      "type": "string"
                                    },
                                    "doubleValue": {
                                      "type": "number"
                                    },
                                    "boolValue": {
                                      "type": "boolean"
                                    },
                                    "arrayValue": {},
                                    "kvlistValue": {},
                                    "bytesValue": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ]
                            }
                          },
                          "severityText": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "timeUnixNano",
                          "body",
                          "traceId",
                          "attributes",
                          "severityText"
                        ]
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst logs = await client.telemetry.logs.list({ direction: 'asc', limit: 1 });\n\nconsole.log(logs.data);"
          }
        ]
      }
    },
    "/v2/vals/{val_id}": {
      "get": {
        "operationId": "valsGet2",
        "tags": [
          "vals"
        ],
        "description": "Get a val by id",
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "200": {
            "description": "A Val",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Val"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst val = await client.vals.retrieve('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');\n\nconsole.log(val.id);"
          }
        ]
      },
      "delete": {
        "operationId": "projectsDelete2",
        "tags": [
          "vals"
        ],
        "description": "Delete a project",
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "204": {
            "description": "Default Response"
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Project not found"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nawait client.vals.delete('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');"
          }
        ]
      }
    },
    "/v2/vals": {
      "get": {
        "operationId": "valsList2",
        "tags": [
          "vals"
        ],
        "description": "Lists all vals including all public vals and your unlisted and private vals",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "public",
                "unlisted",
                "private"
              ]
            },
            "in": "query",
            "name": "privacy",
            "required": false,
            "description": "This resource's privacy setting. Unlisted resources do not appear on profile pages or elsewhere, but you can link to them."
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "user_id",
            "required": false,
            "description": "User ID to filter by"
          },
          {
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query",
            "name": "cursor",
            "required": false,
            "description": "Cursor to start the pagination from"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Val"
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown({\n  bearerToken: 'My Bearer Token',\n});\n\nconst vals = await client.vals.list({ limit: 1 });\n\nconsole.log(vals.data);"
          }
        ]
      },
      "post": {
        "operationId": "valsCreate2",
        "tags": [
          "vals"
        ],
        "description": "Create a new val",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Val information provided to create a new val",
                "type": "object",
                "properties": {
                  "name": {
                    "minLength": 1,
                    "maxLength": 48,
                    "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                    "type": "string"
                  },
                  "description": {
                    "maxLength": 64,
                    "type": "string"
                  },
                  "privacy": {
                    "type": "string",
                    "enum": [
                      "public",
                      "unlisted",
                      "private"
                    ]
                  },
                  "orgId": {
                    "format": "uuid",
                    "description": "ID of the org to create the val in",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "privacy"
                ]
              },
              "example": {
                "name": "myVal",
                "description": "My val",
                "privacy": "public"
              }
            }
          },
          "required": true,
          "description": "Val information provided to create a new val"
        },
        "responses": {
          "201": {
            "description": "A Val",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Val"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: Project name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Conflict: Project name already exists"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst val = await client.vals.create({ name: 'myVal', privacy: 'public', description: 'My val' });\n\nconsole.log(val.id);"
          }
        ]
      }
    },
    "/v2/vals/{val_id}/branches/{branch_id}": {
      "get": {
        "operationId": "branchesGet2",
        "tags": [
          "vals"
        ],
        "description": "Get a branch by id",
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "branch_id",
            "required": true,
            "description": "Id of a branch"
          }
        ],
        "responses": {
          "200": {
            "description": "A Branch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst branch = await client.vals.branches.retrieve(\n  '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n  '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n);\n\nconsole.log(branch.id);"
          }
        ]
      },
      "delete": {
        "operationId": "branchesDelete2",
        "tags": [
          "vals"
        ],
        "description": "Delete a branch",
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "branch_id",
            "required": true,
            "description": "Id of a branch"
          }
        ],
        "responses": {
          "204": {
            "description": "Default Response"
          },
          "404": {
            "description": "Branch not found",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Branch not found"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nawait client.vals.branches.delete(\n  '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n  '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n);"
          }
        ]
      }
    },
    "/v2/vals/{val_id}/branches": {
      "get": {
        "operationId": "branchesList2",
        "tags": [
          "vals"
        ],
        "description": "List all branches for a val",
        "parameters": [
          {
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "required": true,
            "description": "Number of items to skip in order to deliver paginated results"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Branch"
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\n// Automatically fetches more pages as needed.\nfor await (const branchListResponse of client.vals.branches.list('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', {\n  limit: 1,\n  offset: 0,\n})) {\n  console.log(branchListResponse.id);\n}"
          }
        ]
      },
      "post": {
        "operationId": "branchesCreate2",
        "tags": [
          "vals"
        ],
        "description": "Create a new branch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Branch information provided to create a new project",
                "type": "object",
                "properties": {
                  "name": {
                    "minLength": 1,
                    "maxLength": 48,
                    "pattern": "^[a-zA-Z0-9\\-_.]+$",
                    "type": "string"
                  },
                  "branchId": {
                    "format": "uuid",
                    "description": "The branch ID to fork from. If this is not specified, the new branch will be forked from main.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "my-branch",
                "branchId": "00000000-0000-0000-0000-000000000000"
              }
            }
          },
          "required": true,
          "description": "Branch information provided to create a new project"
        },
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "201": {
            "description": "A Branch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: Branch name already exists in this project",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Conflict: Branch name already exists in this project"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst branch = await client.vals.branches.create('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', {\n  name: 'my-branch',\n  branchId: '00000000-0000-0000-0000-000000000000',\n});\n\nconsole.log(branch.id);"
          }
        ]
      }
    },
    "/v2/vals/{val_id}/files": {
      "get": {
        "operationId": "valFilesGet2",
        "tags": [
          "vals"
        ],
        "description": "Get metadata for files and directories in a val. If path is an empty string, returns files at the root directory.",
        "parameters": [
          {
            "schema": {
              "minimum": 0,
              "type": "integer"
            },
            "in": "query",
            "name": "version",
            "required": false,
            "description": "Specific branch version to query"
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "branch_id",
            "required": false,
            "description": "Id to query"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "required": true,
            "description": "Path to a file or directory (e.g. 'dir/subdir/file.ts'). Pass in an empty string to represent the root directory."
          },
          {
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "in": "query",
            "name": "recursive",
            "required": true,
            "description": "Whether to recursively act on all files in the project"
          },
          {
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "required": true,
            "description": "Number of items to skip in order to deliver paginated results"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FileRevisionMetadataV2"
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\n// Automatically fetches more pages as needed.\nfor await (const fileRetrieveResponse of client.vals.files.retrieve('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', {\n  limit: 1,\n  offset: 0,\n  path: 'path',\n  recursive: true,\n})) {\n  console.log(fileRetrieveResponse.id);\n}"
          }
        ]
      },
      "post": {
        "operationId": "filesCreate2",
        "tags": [
          "vals"
        ],
        "description": "Create a new file, project val or directory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "directory"
                        ]
                      },
                      "content": {
                        "type": "null"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "content": {
                        "minLength": 0,
                        "maxLength": 80000,
                        "description": "File and val content. An empty string will create an empty file. When creating a directory, the content should be null or undefined.",
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "file",
                          "interval",
                          "http",
                          "email",
                          "script"
                        ]
                      }
                    },
                    "required": [
                      "content",
                      "type"
                    ]
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "branch_id",
            "required": false,
            "description": "The specified branch of the resource. Defaults to main if not provided."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "required": true,
            "description": "Path to a file or directory (e.g. 'dir/subdir/file.ts'). Pass in an empty string to represent the root directory."
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "201": {
            "description": "A File or Directory's Metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileRevisionMetadataV2"
                }
              }
            }
          },
          "409": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "File or directory already exists at this path",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst file = await client.vals.files.create('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', {\n  path: 'path',\n  type: 'directory',\n});\n\nconsole.log(file.id);"
          }
        ]
      },
      "delete": {
        "operationId": "filesDelete2",
        "tags": [
          "vals"
        ],
        "description": "Deletes a file or a directory. To delete a directory and all of its children, use the recursive flag. To delete all files, pass in an empty path and the recursive flag.",
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "branch_id",
            "required": false,
            "description": "The specified branch of the resource. Defaults to main if not provided."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "required": true,
            "description": "Path to a file or directory (e.g. 'dir/subdir/file.ts'). Pass in an empty string to represent the root directory."
          },
          {
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "in": "query",
            "name": "recursive",
            "required": true,
            "description": "Whether to recursively act on all files in the project"
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "204": {
            "description": "Default Response"
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "description": "File not found"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nawait client.vals.files.delete('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', { path: 'path', recursive: true });"
          }
        ]
      },
      "put": {
        "operationId": "fileContentUpdate2",
        "tags": [
          "vals"
        ],
        "description": "Update a file's content",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "minLength": 0,
                    "maxLength": 80000,
                    "description": "File and val content. An empty string will create an empty file. When creating a directory, the content should be null or undefined.",
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "file",
                      "interval",
                      "http",
                      "email",
                      "script"
                    ]
                  },
                  "parent_path": {
                    "anyOf": [
                      {
                        "description": "Path to the directory you'd like to move this file to (e.g. 'folder1/folder2')",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "name": {
                    "minLength": 1,
                    "maxLength": 48,
                    "pattern": "^[a-zA-Z0-9\\-_.]+$",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "branch_id",
            "required": false,
            "description": "The specified branch of the resource. Defaults to main if not provided."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "required": true,
            "description": "Path to a file or directory (e.g. 'dir/subdir/file.ts'). Pass in an empty string to represent the root directory."
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          }
        ],
        "responses": {
          "200": {
            "description": "A File or Directory's Metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileRevisionMetadataV2"
                }
              }
            }
          },
          "201": {
            "description": "A File or Directory's Metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileRevisionMetadataV2"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst file = await client.vals.files.update('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', { path: 'path' });\n\nconsole.log(file.id);"
          }
        ]
      }
    },
    "/v2/vals/{val_id}/files/content": {
      "get": {
        "operationId": "filesContentGet2",
        "tags": [
          "vals"
        ],
        "description": "Download file content",
        "parameters": [
          {
            "schema": {
              "minimum": 0,
              "type": "integer"
            },
            "in": "query",
            "name": "version",
            "required": false,
            "description": "Specific branch version to query"
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "query",
            "name": "branch_id",
            "required": false,
            "description": "Id to query"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "required": true,
            "description": "Path to a file or directory (e.g. 'dir/subdir/file.ts'). Pass in an empty string to represent the root directory."
          },
          {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "in": "path",
            "name": "val_id",
            "required": true,
            "description": "Id of a val"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "If-Match",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "If-Unmodified-Since",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "If-None-Match",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "If-Modified-Since",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Cache-Control",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Contents of the file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "string",
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "description": "Cached version of the file is the same as the one requested",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Cached version of the file is the same as the one requested"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst response = await client.vals.files.getContent('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', { path: 'path' });\n\nconsole.log(response);\n\nconst content = await response.blob();\nconsole.log(content);"
          }
        ]
      }
    },
    "/v2/files/{file_id}": {
      "get": {
        "operationId": "queryValFileById",
        "tags": [
          "files"
        ],
        "description": "Get file metadata by file ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "file_id",
            "required": true,
            "description": "ID of a file in a val"
          }
        ],
        "responses": {
          "200": {
            "description": "A File or Directory's Metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileRevisionMetadataV2"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst file = await client.files.retrieve('file_id');\n\nconsole.log(file.id);"
          }
        ]
      }
    },
    "/v2/alias/vals/{username}/{val_name}": {
      "get": {
        "operationId": "aliasVal2",
        "tags": [
          "alias"
        ],
        "description": "Get a val",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "required": true,
            "description": "Username of the user whose val you are looking for"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "val_name",
            "required": true,
            "description": "Name of the val you’re looking for"
          }
        ],
        "responses": {
          "200": {
            "description": "A Val",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Val"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown();\n\nconst val = await client.alias.username.valName.retrieve('username', 'val_name');\n\nconsole.log(val.id);"
          }
        ]
      }
    },
    "/v2/me/vals": {
      "get": {
        "operationId": "meVals2",
        "tags": [
          "me"
        ],
        "description": "[BETA] List all of a user's vals for authenticated users",
        "parameters": [
          {
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "required": true,
            "description": "Number of items to skip in order to deliver paginated results"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Val"
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import ValTown from '@valtown/sdk';\n\nconst client = new ValTown({\n  bearerToken: 'My Bearer Token',\n});\n\n// Automatically fetches more pages as needed.\nfor await (const val of client.me.vals.list({ limit: 1, offset: 0 })) {\n  console.log(val.id);\n}"
          }
        ]
      }
    },
    "/v2/orgs": {
      "get": {
        "operationId": "orgsList",
        "tags": [
          "orgs"
        ],
        "description": "Get all orgs you are a member of",
        "parameters": [
          {
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "required": true,
            "description": "Number of items to skip in order to deliver paginated results"
          },
          {
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "required": true,
            "description": "Maximum items to return in each paginated response"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated result set",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A paginated result set",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Org"
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/PaginationLinks"
                    }
                  },
                  "required": [
                    "data",
                    "links"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.val.town",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "vals",
      "description": "These endpoints\nlet you get, create, and run vals."
    },
    {
      "name": "alias",
      "description": "Many API endpoints\naccept IDs instead of user-facing names. The alias\nendpoints let you convert between the user-facing name of a\nval or another object into an ID that can be used with other\nAPI endpoints"
    },
    {
      "name": "me",
      "description": "These endpoints\ngive access to details and data from the requesting user."
    },
    {
      "name": "users",
      "description": "Users"
    },
    {
      "name": "sqlite",
      "description": "SQLite"
    },
    {
      "name": "blobs",
      "description": "Blobs"
    },
    {
      "name": "search",
      "description": "Search"
    },
    {
      "name": "emails",
      "description": "Emails"
    }
  ],
  "externalDocs": {
    "url": "https://api.val.town/documentation",
    "description": "Find more info here"
  }
}
